// <auto-generated />

using System;
using DiscImageChef.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace DiscImageChef.Server.Migrations
{
    [DbContext(typeof(DicServerContext))]
    internal class DicServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
            #pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "3.0.0").HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.Ata", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<byte[]>("Identify").HasColumnType("longblob");

                b.Property<int?>("ReadCapabilitiesId").HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("ReadCapabilitiesId");

                b.ToTable("Ata");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.BlockDescriptor", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<uint?>("BlockLength").HasColumnType("int unsigned");

                b.Property<ulong?>("Blocks").HasColumnType("bigint unsigned");

                b.Property<byte>("Density").HasColumnType("tinyint unsigned");

                b.Property<int?>("ScsiModeId").HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("ScsiModeId");

                b.ToTable("BlockDescriptor");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.Chs", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<ushort>("Cylinders").HasColumnType("smallint unsigned");

                b.Property<ushort>("Heads").HasColumnType("smallint unsigned");

                b.Property<ushort>("Sectors").HasColumnType("smallint unsigned");

                b.HasKey("Id");

                b.ToTable("Chs");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.DensityCode", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<int>("Code").HasColumnType("int");

                b.Property<int?>("SscSupportedMediaId").HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("SscSupportedMediaId");

                b.ToTable("DensityCode");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.FireWire", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<string>("Manufacturer").HasColumnType("longtext");

                b.Property<string>("Product").HasColumnType("longtext");

                b.Property<uint>("ProductID").HasColumnType("int unsigned");

                b.Property<bool>("RemovableMedia").HasColumnType("bit");

                b.Property<uint>("VendorID").HasColumnType("int unsigned");

                b.HasKey("Id");

                b.ToTable("FireWire");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.Mmc", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<int?>("FeaturesId").HasColumnType("int");

                b.Property<byte[]>("ModeSense2AData").HasColumnType("longblob");

                b.HasKey("Id");

                b.HasIndex("FeaturesId");

                b.ToTable("Mmc");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.MmcFeatures", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<byte?>("AACSVersion").HasColumnType("tinyint unsigned");

                b.Property<byte?>("AGIDs").HasColumnType("tinyint unsigned");

                b.Property<byte[]>("BinaryData").HasColumnType("longblob");

                b.Property<byte?>("BindingNonceBlocks").HasColumnType("tinyint unsigned");

                b.Property<ushort?>("BlocksPerReadableUnit").HasColumnType("smallint unsigned");

                b.Property<bool>("BufferUnderrunFreeInDVD").HasColumnType("bit");

                b.Property<bool>("BufferUnderrunFreeInSAO").HasColumnType("bit");

                b.Property<bool>("BufferUnderrunFreeInTAO").HasColumnType("bit");

                b.Property<byte?>("CPRMVersion").HasColumnType("tinyint unsigned");

                b.Property<byte?>("CSSVersion").HasColumnType("tinyint unsigned");

                b.Property<bool>("CanAudioScan").HasColumnType("bit");

                b.Property<bool>("CanEject").HasColumnType("bit");

                b.Property<bool>("CanEraseSector").HasColumnType("bit");

                b.Property<bool>("CanExpandBDRESpareArea").HasColumnType("bit");

                b.Property<bool>("CanFormat").HasColumnType("bit");

                b.Property<bool>("CanFormatBDREWithoutSpare").HasColumnType("bit");

                b.Property<bool>("CanFormatCert").HasColumnType("bit");

                b.Property<bool>("CanFormatFRF").HasColumnType("bit");

                b.Property<bool>("CanFormatQCert").HasColumnType("bit");

                b.Property<bool>("CanFormatRRM").HasColumnType("bit");

                b.Property<bool>("CanGenerateBindingNonce").HasColumnType("bit");

                b.Property<bool>("CanLoad").HasColumnType("bit");

                b.Property<bool>("CanMuteSeparateChannels").HasColumnType("bit");

                b.Property<bool>("CanOverwriteSAOTrack").HasColumnType("bit");

                b.Property<bool>("CanOverwriteTAOTrack").HasColumnType("bit");

                b.Property<bool>("CanPlayCDAudio").HasColumnType("bit");

                b.Property<bool>("CanPseudoOverwriteBDR").HasColumnType("bit");

                b.Property<bool>("CanReadAllDualR").HasColumnType("bit");

                b.Property<bool>("CanReadAllDualRW").HasColumnType("bit");

                b.Property<bool>("CanReadBD").HasColumnType("bit");

                b.Property<bool>("CanReadBDR").HasColumnType("bit");

                b.Property<bool>("CanReadBDRE1").HasColumnType("bit");

                b.Property<bool>("CanReadBDRE2").HasColumnType("bit");

                b.Property<bool>("CanReadBDROM").HasColumnType("bit");

                b.Property<bool>("CanReadBluBCA").HasColumnType("bit");

                b.Property<bool>("CanReadCD").HasColumnType("bit");

                b.Property<bool>("CanReadCDMRW").HasColumnType("bit");

                b.Property<bool>("CanReadCPRM_MKB").HasColumnType("bit");

                b.Property<bool>("CanReadDDCD").HasColumnType("bit");

                b.Property<bool>("CanReadDVD").HasColumnType("bit");

                b.Property<bool>("CanReadDVDPlusMRW").HasColumnType("bit");

                b.Property<bool>("CanReadDVDPlusR").HasColumnType("bit");

                b.Property<bool>("CanReadDVDPlusRDL").HasColumnType("bit");

                b.Property<bool>("CanReadDVDPlusRW").HasColumnType("bit");

                b.Property<bool>("CanReadDVDPlusRWDL").HasColumnType("bit");

                b.Property<bool>("CanReadDriveAACSCertificate").HasColumnType("bit");

                b.Property<bool>("CanReadHDDVD").HasColumnType("bit");

                b.Property<bool>("CanReadHDDVDR").HasColumnType("bit");

                b.Property<bool>("CanReadHDDVDRAM").HasColumnType("bit");

                b.Property<bool>("CanReadLeadInCDText").HasColumnType("bit");

                b.Property<bool>("CanReadOldBDR").HasColumnType("bit");

                b.Property<bool>("CanReadOldBDRE").HasColumnType("bit");

                b.Property<bool>("CanReadOldBDROM").HasColumnType("bit");

                b.Property<bool>("CanReadSpareAreaInformation").HasColumnType("bit");

                b.Property<bool>("CanReportDriveSerial").HasColumnType("bit");

                b.Property<bool>("CanReportMediaSerial").HasColumnType("bit");

                b.Property<bool>("CanTestWriteDDCDR").HasColumnType("bit");

                b.Property<bool>("CanTestWriteDVD").HasColumnType("bit");

                b.Property<bool>("CanTestWriteInSAO").HasColumnType("bit");

                b.Property<bool>("CanTestWriteInTAO").HasColumnType("bit");

                b.Property<bool>("CanUpgradeFirmware").HasColumnType("bit");

                b.Property<bool>("CanWriteBD").HasColumnType("bit");

                b.Property<bool>("CanWriteBDR").HasColumnType("bit");

                b.Property<bool>("CanWriteBDRE1").HasColumnType("bit");

                b.Property<bool>("CanWriteBDRE2").HasColumnType("bit");

                b.Property<bool>("CanWriteBusEncryptedBlocks").HasColumnType("bit");

                b.Property<bool>("CanWriteCDMRW").HasColumnType("bit");

                b.Property<bool>("CanWriteCDRW").HasColumnType("bit");

                b.Property<bool>("CanWriteCDRWCAV").HasColumnType("bit");

                b.Property<bool>("CanWriteCDSAO").HasColumnType("bit");

                b.Property<bool>("CanWriteCDTAO").HasColumnType("bit");

                b.Property<bool>("CanWriteCSSManagedDVD").HasColumnType("bit");

                b.Property<bool>("CanWriteDDCDR").HasColumnType("bit");

                b.Property<bool>("CanWriteDDCDRW").HasColumnType("bit");

                b.Property<bool>("CanWriteDVDPlusMRW").HasColumnType("bit");

                b.Property<bool>("CanWriteDVDPlusR").HasColumnType("bit");

                b.Property<bool>("CanWriteDVDPlusRDL").HasColumnType("bit");

                b.Property<bool>("CanWriteDVDPlusRW").HasColumnType("bit");

                b.Property<bool>("CanWriteDVDPlusRWDL").HasColumnType("bit");

                b.Property<bool>("CanWriteDVDR").HasColumnType("bit");

                b.Property<bool>("CanWriteDVDRDL").HasColumnType("bit");

                b.Property<bool>("CanWriteDVDRW").HasColumnType("bit");

                b.Property<bool>("CanWriteHDDVDR").HasColumnType("bit");

                b.Property<bool>("CanWriteHDDVDRAM").HasColumnType("bit");

                b.Property<bool>("CanWriteOldBDR").HasColumnType("bit");

                b.Property<bool>("CanWriteOldBDRE").HasColumnType("bit");

                b.Property<bool>("CanWritePackedSubchannelInTAO").HasColumnType("bit");

                b.Property<bool>("CanWriteRWSubchannelInSAO").HasColumnType("bit");

                b.Property<bool>("CanWriteRWSubchannelInTAO").HasColumnType("bit");

                b.Property<bool>("CanWriteRaw").HasColumnType("bit");

                b.Property<bool>("CanWriteRawMultiSession").HasColumnType("bit");

                b.Property<bool>("CanWriteRawSubchannelInTAO").HasColumnType("bit");

                b.Property<bool>("ChangerIsSideChangeCapable").HasColumnType("bit");

                b.Property<byte>("ChangerSlots").HasColumnType("tinyint unsigned");

                b.Property<bool>("ChangerSupportsDiscPresent").HasColumnType("bit");

                b.Property<bool>("DBML").HasColumnType("bit");

                b.Property<bool>("DVDMultiRead").HasColumnType("bit");

                b.Property<bool>("EmbeddedChanger").HasColumnType("bit");

                b.Property<bool>("ErrorRecoveryPage").HasColumnType("bit");

                b.Property<DateTime?>("FirmwareDate").HasColumnType("datetime(6)");

                b.Property<byte?>("LoadingMechanismType").HasColumnType("tinyint unsigned");

                b.Property<bool>("Locked").HasColumnType("bit");

                b.Property<uint?>("LogicalBlockSize").HasColumnType("int unsigned");

                b.Property<bool>("MultiRead").HasColumnType("bit");

                b.Property<uint?>("PhysicalInterfaceStandardNumber").HasColumnType("int unsigned");

                b.Property<bool>("PreventJumper").HasColumnType("bit");

                b.Property<bool>("SupportsAACS").HasColumnType("bit");

                b.Property<bool>("SupportsBusEncryption").HasColumnType("bit");

                b.Property<bool>("SupportsC2").HasColumnType("bit");

                b.Property<bool>("SupportsCPRM").HasColumnType("bit");

                b.Property<bool>("SupportsCSS").HasColumnType("bit");

                b.Property<bool>("SupportsDAP").HasColumnType("bit");

                b.Property<bool>("SupportsDeviceBusyEvent").HasColumnType("bit");

                b.Property<bool>("SupportsHybridDiscs").HasColumnType("bit");

                b.Property<bool>("SupportsModePage1Ch").HasColumnType("bit");

                b.Property<bool>("SupportsOSSC").HasColumnType("bit");

                b.Property<bool>("SupportsPWP").HasColumnType("bit");

                b.Property<bool>("SupportsSWPP").HasColumnType("bit");

                b.Property<bool>("SupportsSecurDisc").HasColumnType("bit");

                b.Property<bool>("SupportsSeparateVolume").HasColumnType("bit");

                b.Property<bool>("SupportsVCPS").HasColumnType("bit");

                b.Property<bool>("SupportsWriteInhibitDCB").HasColumnType("bit");

                b.Property<bool>("SupportsWriteProtectPAC").HasColumnType("bit");

                b.Property<ushort?>("VolumeLevels").HasColumnType("smallint unsigned");

                b.HasKey("Id");

                b.ToTable("MmcFeatures");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.MmcSd", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<byte[]>("CID").HasColumnType("longblob");

                b.Property<byte[]>("CSD").HasColumnType("longblob");

                b.Property<byte[]>("ExtendedCSD").HasColumnType("longblob");

                b.Property<byte[]>("OCR").HasColumnType("longblob");

                b.Property<byte[]>("SCR").HasColumnType("longblob");

                b.HasKey("Id");

                b.ToTable("MmcSd");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.Pcmcia", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<byte[]>("CIS").HasColumnType("longblob");

                b.Property<ushort?>("CardCode").HasColumnType("smallint unsigned");

                b.Property<string>("Compliance").HasColumnType("longtext");

                b.Property<string>("Manufacturer").HasColumnType("longtext");

                b.Property<ushort?>("ManufacturerCode").HasColumnType("smallint unsigned");

                b.Property<string>("ProductName").HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("Pcmcia");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.Scsi", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<byte[]>("InquiryData").HasColumnType("longblob");

                b.Property<byte[]>("ModeSense10ChangeableData").HasColumnType("longblob");

                b.Property<byte[]>("ModeSense10CurrentData").HasColumnType("longblob");

                b.Property<byte[]>("ModeSense10Data").HasColumnType("longblob");

                b.Property<byte[]>("ModeSense6ChangeableData").HasColumnType("longblob");

                b.Property<byte[]>("ModeSense6CurrentData").HasColumnType("longblob");

                b.Property<byte[]>("ModeSense6Data").HasColumnType("longblob");

                b.Property<int?>("ModeSenseId").HasColumnType("int");

                b.Property<int?>("MultiMediaDeviceId").HasColumnType("int");

                b.Property<int?>("ReadCapabilitiesId").HasColumnType("int");

                b.Property<int?>("SequentialDeviceId").HasColumnType("int");

                b.Property<bool>("SupportsModeSense10").HasColumnType("bit");

                b.Property<bool>("SupportsModeSense6").HasColumnType("bit");

                b.Property<bool>("SupportsModeSubpages").HasColumnType("bit");

                b.HasKey("Id");

                b.HasIndex("ModeSenseId");

                b.HasIndex("MultiMediaDeviceId");

                b.HasIndex("ReadCapabilitiesId");

                b.HasIndex("SequentialDeviceId");

                b.ToTable("Scsi");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.ScsiMode", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<bool>("BlankCheckEnabled").HasColumnType("bit");

                b.Property<byte?>("BufferedMode").HasColumnType("tinyint unsigned");

                b.Property<bool>("DPOandFUA").HasColumnType("bit");

                b.Property<byte?>("MediumType").HasColumnType("tinyint unsigned");

                b.Property<byte?>("Speed").HasColumnType("tinyint unsigned");

                b.Property<bool>("WriteProtected").HasColumnType("bit");

                b.HasKey("Id");

                b.ToTable("ScsiMode");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.ScsiPage", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<int?>("ScsiId").HasColumnType("int");

                b.Property<int?>("ScsiModeId").HasColumnType("int");

                b.Property<byte>("page").HasColumnType("tinyint unsigned");

                b.Property<byte?>("subpage").HasColumnType("tinyint unsigned");

                b.Property<byte[]>("value").HasColumnType("longblob");

                b.HasKey("Id");

                b.HasIndex("ScsiId");

                b.HasIndex("ScsiModeId");

                b.ToTable("ScsiPage");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.Ssc", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<byte?>("BlockSizeGranularity").HasColumnType("tinyint unsigned");

                b.Property<uint?>("MaxBlockLength").HasColumnType("int unsigned");

                b.Property<uint?>("MinBlockLength").HasColumnType("int unsigned");

                b.HasKey("Id");

                b.ToTable("Ssc");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.SscSupportedMedia", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<string>("Description").HasColumnType("longtext");

                b.Property<ushort>("Length").HasColumnType("smallint unsigned");

                b.Property<byte>("MediumType").HasColumnType("tinyint unsigned");

                b.Property<string>("Name").HasColumnType("longtext");

                b.Property<string>("Organization").HasColumnType("longtext");

                b.Property<int?>("SscId").HasColumnType("int");

                b.Property<int?>("TestedSequentialMediaId").HasColumnType("int");

                b.Property<ushort>("Width").HasColumnType("smallint unsigned");

                b.HasKey("Id");

                b.HasIndex("SscId");

                b.HasIndex("TestedSequentialMediaId");

                b.ToTable("SscSupportedMedia");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.SupportedDensity", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<uint>("BitsPerMm").HasColumnType("int unsigned");

                b.Property<uint>("Capacity").HasColumnType("int unsigned");

                b.Property<bool>("DefaultDensity").HasColumnType("bit");

                b.Property<string>("Description").HasColumnType("longtext");

                b.Property<bool>("Duplicate").HasColumnType("bit");

                b.Property<string>("Name").HasColumnType("longtext");

                b.Property<string>("Organization").HasColumnType("longtext");

                b.Property<byte>("PrimaryCode").HasColumnType("tinyint unsigned");

                b.Property<byte>("SecondaryCode").HasColumnType("tinyint unsigned");

                b.Property<int?>("SscId").HasColumnType("int");

                b.Property<int?>("TestedSequentialMediaId").HasColumnType("int");

                b.Property<ushort>("Tracks").HasColumnType("smallint unsigned");

                b.Property<ushort>("Width").HasColumnType("smallint unsigned");

                b.Property<bool>("Writable").HasColumnType("bit");

                b.HasKey("Id");

                b.HasIndex("SscId");

                b.HasIndex("TestedSequentialMediaId");

                b.ToTable("SupportedDensity");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.TestedMedia", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<byte[]>("AdipData").HasColumnType("longblob");

                b.Property<int?>("AtaId").HasColumnType("int");

                b.Property<byte[]>("AtipData").HasColumnType("longblob");

                b.Property<uint?>("BlockSize").HasColumnType("int unsigned");

                b.Property<ulong?>("Blocks").HasColumnType("bigint unsigned");

                b.Property<byte[]>("BluBcaData").HasColumnType("longblob");

                b.Property<byte[]>("BluDdsData").HasColumnType("longblob");

                b.Property<byte[]>("BluDiData").HasColumnType("longblob");

                b.Property<byte[]>("BluPacData").HasColumnType("longblob");

                b.Property<byte[]>("BluSaiData").HasColumnType("longblob");

                b.Property<byte[]>("C2PointersData").HasColumnType("longblob");

                b.Property<int?>("CHSId").HasColumnType("int");

                b.Property<bool?>("CanReadAACS").HasColumnType("bit");

                b.Property<bool?>("CanReadADIP").HasColumnType("bit");

                b.Property<bool?>("CanReadATIP").HasColumnType("bit");

                b.Property<bool?>("CanReadBCA").HasColumnType("bit");

                b.Property<bool?>("CanReadC2Pointers").HasColumnType("bit");

                b.Property<bool?>("CanReadCMI").HasColumnType("bit");

                b.Property<bool?>("CanReadCorrectedSubchannel").HasColumnType("bit");

                b.Property<bool?>("CanReadCorrectedSubchannelWithC2").HasColumnType("bit");

                b.Property<bool?>("CanReadDCB").HasColumnType("bit");

                b.Property<bool?>("CanReadDDS").HasColumnType("bit");

                b.Property<bool?>("CanReadDMI").HasColumnType("bit");

                b.Property<bool?>("CanReadDiscInformation").HasColumnType("bit");

                b.Property<bool?>("CanReadFirstTrackPreGap").HasColumnType("bit");

                b.Property<bool?>("CanReadFullTOC").HasColumnType("bit");

                b.Property<bool?>("CanReadHDCMI").HasColumnType("bit");

                b.Property<bool?>("CanReadLayerCapacity").HasColumnType("bit");

                b.Property<bool?>("CanReadLeadIn").HasColumnType("bit");

                b.Property<bool?>("CanReadLeadOut").HasColumnType("bit");

                b.Property<bool?>("CanReadMediaID").HasColumnType("bit");

                b.Property<bool?>("CanReadMediaSerial").HasColumnType("bit");

                b.Property<bool?>("CanReadPAC").HasColumnType("bit");

                b.Property<bool?>("CanReadPFI").HasColumnType("bit");

                b.Property<bool?>("CanReadPMA").HasColumnType("bit");

                b.Property<bool?>("CanReadPQSubchannel").HasColumnType("bit");

                b.Property<bool?>("CanReadPQSubchannelWithC2").HasColumnType("bit");

                b.Property<bool?>("CanReadPRI").HasColumnType("bit");

                b.Property<bool?>("CanReadRWSubchannel").HasColumnType("bit");

                b.Property<bool?>("CanReadRWSubchannelWithC2").HasColumnType("bit");

                b.Property<bool?>("CanReadRecordablePFI").HasColumnType("bit");

                b.Property<bool?>("CanReadSpareAreaInformation").HasColumnType("bit");

                b.Property<bool?>("CanReadTOC").HasColumnType("bit");

                b.Property<bool?>("CanReadingIntersessionLeadIn").HasColumnType("bit");

                b.Property<bool?>("CanReadingIntersessionLeadOut").HasColumnType("bit");

                b.Property<byte[]>("CmiData").HasColumnType("longblob");

                b.Property<byte[]>("CorrectedSubchannelData").HasColumnType("longblob");

                b.Property<byte[]>("CorrectedSubchannelWithC2Data").HasColumnType("longblob");

                b.Property<int?>("CurrentCHSId").HasColumnType("int");

                b.Property<byte[]>("DcbData").HasColumnType("longblob");

                b.Property<byte?>("Density").HasColumnType("tinyint unsigned");

                b.Property<byte[]>("DmiData").HasColumnType("longblob");

                b.Property<byte[]>("DvdAacsData").HasColumnType("longblob");

                b.Property<byte[]>("DvdBcaData").HasColumnType("longblob");

                b.Property<byte[]>("DvdDdsData").HasColumnType("longblob");

                b.Property<byte[]>("DvdLayerData").HasColumnType("longblob");

                b.Property<byte[]>("DvdSaiData").HasColumnType("longblob");

                b.Property<byte[]>("EmbossedPfiData").HasColumnType("longblob");

                b.Property<byte[]>("FullTocData").HasColumnType("longblob");

                b.Property<byte[]>("HLDTSTReadRawDVDData").HasColumnType("longblob");

                b.Property<byte[]>("HdCmiData").HasColumnType("longblob");

                b.Property<byte[]>("IdentifyData").HasColumnType("longblob");

                b.Property<byte[]>("IntersessionLeadInData").HasColumnType("longblob");

                b.Property<byte[]>("IntersessionLeadOutData").HasColumnType("longblob");

                b.Property<ulong?>("LBA48Sectors").HasColumnType("bigint unsigned");

                b.Property<uint?>("LBASectors").HasColumnType("int unsigned");

                b.Property<byte[]>("LeadInData").HasColumnType("longblob");

                b.Property<byte[]>("LeadOutData").HasColumnType("longblob");

                b.Property<ushort?>("LogicalAlignment").HasColumnType("smallint unsigned");

                b.Property<uint?>("LongBlockSize").HasColumnType("int unsigned");

                b.Property<string>("Manufacturer").HasColumnType("longtext");

                b.Property<bool>("MediaIsRecognized").HasColumnType("bit");

                b.Property<byte?>("MediumType").HasColumnType("tinyint unsigned");

                b.Property<string>("MediumTypeName").HasColumnType("longtext");

                b.Property<int?>("MmcId").HasColumnType("int");

                b.Property<byte[]>("ModeSense10Data").HasColumnType("longblob");

                b.Property<byte[]>("ModeSense6Data").HasColumnType("longblob");

                b.Property<string>("Model").HasColumnType("longtext");

                b.Property<byte[]>("NecReadCddaData").HasColumnType("longblob");

                b.Property<ushort?>("NominalRotationRate").HasColumnType("smallint unsigned");

                b.Property<byte[]>("PQSubchannelData").HasColumnType("longblob");

                b.Property<byte[]>("PQSubchannelWithC2Data").HasColumnType("longblob");

                b.Property<byte[]>("PfiData").HasColumnType("longblob");

                b.Property<uint?>("PhysicalBlockSize").HasColumnType("int unsigned");

                b.Property<byte[]>("PioneerReadCddaData").HasColumnType("longblob");

                b.Property<byte[]>("PioneerReadCddaMsfData").HasColumnType("longblob");

                b.Property<byte[]>("PlextorReadCddaData").HasColumnType("longblob");

                b.Property<byte[]>("PlextorReadRawDVDData").HasColumnType("longblob");

                b.Property<byte[]>("PmaData").HasColumnType("longblob");

                b.Property<byte[]>("PriData").HasColumnType("longblob");

                b.Property<byte[]>("RWSubchannelData").HasColumnType("longblob");

                b.Property<byte[]>("RWSubchannelWithC2Data").HasColumnType("longblob");

                b.Property<byte[]>("Read10Data").HasColumnType("longblob");

                b.Property<byte[]>("Read12Data").HasColumnType("longblob");

                b.Property<byte[]>("Read16Data").HasColumnType("longblob");

                b.Property<byte[]>("Read6Data").HasColumnType("longblob");

                b.Property<byte[]>("ReadCdData").HasColumnType("longblob");

                b.Property<byte[]>("ReadCdFullData").HasColumnType("longblob");

                b.Property<byte[]>("ReadCdMsfData").HasColumnType("longblob");

                b.Property<byte[]>("ReadCdMsfFullData").HasColumnType("longblob");

                b.Property<byte[]>("ReadDmaData").HasColumnType("longblob");

                b.Property<byte[]>("ReadDmaLba48Data").HasColumnType("longblob");

                b.Property<byte[]>("ReadDmaLbaData").HasColumnType("longblob");

                b.Property<byte[]>("ReadDmaRetryData").HasColumnType("longblob");

                b.Property<byte[]>("ReadDmaRetryLbaData").HasColumnType("longblob");

                b.Property<byte[]>("ReadLba48Data").HasColumnType("longblob");

                b.Property<byte[]>("ReadLbaData").HasColumnType("longblob");

                b.Property<byte[]>("ReadLong10Data").HasColumnType("longblob");

                b.Property<byte[]>("ReadLong16Data").HasColumnType("longblob");

                b.Property<byte[]>("ReadLongData").HasColumnType("longblob");

                b.Property<byte[]>("ReadLongLbaData").HasColumnType("longblob");

                b.Property<byte[]>("ReadLongRetryData").HasColumnType("longblob");

                b.Property<byte[]>("ReadLongRetryLbaData").HasColumnType("longblob");

                b.Property<byte[]>("ReadRetryLbaData").HasColumnType("longblob");

                b.Property<byte[]>("ReadSectorsData").HasColumnType("longblob");

                b.Property<byte[]>("ReadSectorsRetryData").HasColumnType("longblob");

                b.Property<int?>("ScsiId").HasColumnType("int");

                b.Property<bool?>("SolidStateDevice").HasColumnType("bit");

                b.Property<bool?>("SupportsHLDTSTReadRawDVD").HasColumnType("bit");

                b.Property<bool?>("SupportsNECReadCDDA").HasColumnType("bit");

                b.Property<bool?>("SupportsPioneerReadCDDA").HasColumnType("bit");

                b.Property<bool?>("SupportsPioneerReadCDDAMSF").HasColumnType("bit");

                b.Property<bool?>("SupportsPlextorReadCDDA").HasColumnType("bit");

                b.Property<bool?>("SupportsPlextorReadRawDVD").HasColumnType("bit");

                b.Property<bool?>("SupportsRead10").HasColumnType("bit");

                b.Property<bool?>("SupportsRead12").HasColumnType("bit");

                b.Property<bool?>("SupportsRead16").HasColumnType("bit");

                b.Property<bool?>("SupportsRead6").HasColumnType("bit");

                b.Property<bool?>("SupportsReadCapacity").HasColumnType("bit");

                b.Property<bool?>("SupportsReadCapacity16").HasColumnType("bit");

                b.Property<bool?>("SupportsReadCd").HasColumnType("bit");

                b.Property<bool?>("SupportsReadCdMsf").HasColumnType("bit");

                b.Property<bool?>("SupportsReadCdMsfRaw").HasColumnType("bit");

                b.Property<bool?>("SupportsReadCdRaw").HasColumnType("bit");

                b.Property<bool?>("SupportsReadDma").HasColumnType("bit");

                b.Property<bool?>("SupportsReadDmaLba").HasColumnType("bit");

                b.Property<bool?>("SupportsReadDmaLba48").HasColumnType("bit");

                b.Property<bool?>("SupportsReadDmaRetry").HasColumnType("bit");

                b.Property<bool?>("SupportsReadDmaRetryLba").HasColumnType("bit");

                b.Property<bool?>("SupportsReadLba").HasColumnType("bit");

                b.Property<bool?>("SupportsReadLba48").HasColumnType("bit");

                b.Property<bool?>("SupportsReadLong").HasColumnType("bit");

                b.Property<bool?>("SupportsReadLong16").HasColumnType("bit");

                b.Property<bool?>("SupportsReadLongLba").HasColumnType("bit");

                b.Property<bool?>("SupportsReadLongRetry").HasColumnType("bit");

                b.Property<bool?>("SupportsReadLongRetryLba").HasColumnType("bit");

                b.Property<bool?>("SupportsReadRetry").HasColumnType("bit");

                b.Property<bool?>("SupportsReadRetryLba").HasColumnType("bit");

                b.Property<bool?>("SupportsReadSectors").HasColumnType("bit");

                b.Property<bool?>("SupportsSeek").HasColumnType("bit");

                b.Property<bool?>("SupportsSeekLba").HasColumnType("bit");

                b.Property<byte[]>("TocData").HasColumnType("longblob");

                b.Property<byte[]>("Track1PregapData").HasColumnType("longblob");

                b.Property<ushort?>("UnformattedBPS").HasColumnType("smallint unsigned");

                b.Property<ushort?>("UnformattedBPT").HasColumnType("smallint unsigned");

                b.HasKey("Id");

                b.HasIndex("AtaId");

                b.HasIndex("CHSId");

                b.HasIndex("CurrentCHSId");

                b.HasIndex("MmcId");

                b.HasIndex("ScsiId");

                b.ToTable("TestedMedia");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.TestedSequentialMedia", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<bool?>("CanReadMediaSerial").HasColumnType("bit");

                b.Property<byte?>("Density").HasColumnType("tinyint unsigned");

                b.Property<string>("Manufacturer").HasColumnType("longtext");

                b.Property<bool>("MediaIsRecognized").HasColumnType("bit");

                b.Property<byte?>("MediumType").HasColumnType("tinyint unsigned");

                b.Property<string>("MediumTypeName").HasColumnType("longtext");

                b.Property<byte[]>("ModeSense10Data").HasColumnType("longblob");

                b.Property<byte[]>("ModeSense6Data").HasColumnType("longblob");

                b.Property<string>("Model").HasColumnType("longtext");

                b.Property<int?>("SscId").HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("SscId");

                b.ToTable("TestedSequentialMedia");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.Usb", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<byte[]>("Descriptors").HasColumnType("longblob");

                b.Property<string>("Manufacturer").HasColumnType("longtext");

                b.Property<string>("Product").HasColumnType("longtext");

                b.Property<ushort>("ProductID").HasColumnType("smallint unsigned");

                b.Property<bool>("RemovableMedia").HasColumnType("bit");

                b.Property<ushort>("VendorID").HasColumnType("smallint unsigned");

                b.HasKey("Id");

                b.ToTable("Usb");
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.Command", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<long>("Count").HasColumnType("bigint");

                b.Property<string>("Name").HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("Commands");
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.CompactDiscOffset", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<DateTime>("AddedWhen").HasColumnType("datetime(6)");

                b.Property<float>("Agreement").HasColumnType("float");

                b.Property<string>("Manufacturer").HasColumnType("longtext");

                b.Property<string>("Model").HasColumnType("longtext");

                b.Property<DateTime>("ModifiedWhen").HasColumnType("datetime(6)");

                b.Property<short>("Offset").HasColumnType("smallint");

                b.Property<int>("Submissions").HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("ModifiedWhen");

                b.ToTable("CdOffsets");
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.Device", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<int?>("ATAId").HasColumnType("int");

                b.Property<int?>("ATAPIId").HasColumnType("int");

                b.Property<DateTime>("AddedWhen").HasColumnType("datetime(6)");

                b.Property<int?>("CdOffsetId").HasColumnType("int");

                b.Property<bool>("CompactFlash").HasColumnType("bit");

                b.Property<int?>("FireWireId").HasColumnType("int");

                b.Property<string>("Manufacturer").HasColumnType("longtext");

                b.Property<string>("Model").HasColumnType("longtext");

                b.Property<DateTime?>("ModifiedWhen").HasColumnType("datetime(6)");

                b.Property<int?>("MultiMediaCardId").HasColumnType("int");

                b.Property<int>("OptimalMultipleSectorsRead").HasColumnType("int");

                b.Property<int?>("PCMCIAId").HasColumnType("int");

                b.Property<string>("Revision").HasColumnType("longtext");

                b.Property<int?>("SCSIId").HasColumnType("int");

                b.Property<int?>("SecureDigitalId").HasColumnType("int");

                b.Property<int>("Type").HasColumnType("int");

                b.Property<int?>("USBId").HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("ATAId");

                b.HasIndex("ATAPIId");

                b.HasIndex("CdOffsetId");

                b.HasIndex("FireWireId");

                b.HasIndex("ModifiedWhen");

                b.HasIndex("MultiMediaCardId");

                b.HasIndex("PCMCIAId");

                b.HasIndex("SCSIId");

                b.HasIndex("SecureDigitalId");

                b.HasIndex("USBId");

                b.ToTable("Devices");
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.DeviceStat", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<string>("Bus").HasColumnType("longtext");

                b.Property<string>("Manufacturer").HasColumnType("longtext");

                b.Property<string>("Model").HasColumnType("longtext");

                b.Property<int?>("ReportId").HasColumnType("int");

                b.Property<string>("Revision").HasColumnType("longtext");

                b.HasKey("Id");

                b.HasIndex("ReportId");

                b.ToTable("DeviceStats");
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.Filesystem", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<long>("Count").HasColumnType("bigint");

                b.Property<string>("Name").HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("Filesystems");
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.Filter", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<long>("Count").HasColumnType("bigint");

                b.Property<string>("Name").HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("Filters");
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.Media", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<long>("Count").HasColumnType("bigint");

                b.Property<bool>("Real").HasColumnType("bit");

                b.Property<string>("Type").HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("Medias");
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.MediaFormat", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<long>("Count").HasColumnType("bigint");

                b.Property<string>("Name").HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("MediaFormats");
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.OperatingSystem", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<long>("Count").HasColumnType("bigint");

                b.Property<string>("Name").HasColumnType("longtext");

                b.Property<string>("Version").HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("OperatingSystems");
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.Partition", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<long>("Count").HasColumnType("bigint");

                b.Property<string>("Name").HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("Partitions");
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.UploadedReport", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<int?>("ATAId").HasColumnType("int");

                b.Property<int?>("ATAPIId").HasColumnType("int");

                b.Property<bool>("CompactFlash").HasColumnType("bit");

                b.Property<int?>("FireWireId").HasColumnType("int");

                b.Property<string>("Manufacturer").HasColumnType("longtext");

                b.Property<string>("Model").HasColumnType("longtext");

                b.Property<int?>("MultiMediaCardId").HasColumnType("int");

                b.Property<int?>("PCMCIAId").HasColumnType("int");

                b.Property<string>("Revision").HasColumnType("longtext");

                b.Property<int?>("SCSIId").HasColumnType("int");

                b.Property<int?>("SecureDigitalId").HasColumnType("int");

                b.Property<int>("Type").HasColumnType("int");

                b.Property<int?>("USBId").HasColumnType("int");

                b.Property<DateTime>("UploadedWhen").HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("ATAId");

                b.HasIndex("ATAPIId");

                b.HasIndex("FireWireId");

                b.HasIndex("MultiMediaCardId");

                b.HasIndex("PCMCIAId");

                b.HasIndex("SCSIId");

                b.HasIndex("SecureDigitalId");

                b.HasIndex("USBId");

                b.ToTable("Reports");
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.UsbProduct", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<DateTime>("AddedWhen").HasColumnType("datetime(6)");

                b.Property<DateTime>("ModifiedWhen").HasColumnType("datetime(6)");

                b.Property<string>("Product").HasColumnType("longtext");

                b.Property<ushort>("ProductId").HasColumnType("smallint unsigned");

                b.Property<int>("VendorId").HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("ModifiedWhen");

                b.HasIndex("ProductId");

                b.HasIndex("VendorId");

                b.ToTable("UsbProducts");
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.UsbVendor", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<DateTime>("AddedWhen").HasColumnType("datetime(6)");

                b.Property<DateTime>("ModifiedWhen").HasColumnType("datetime(6)");

                b.Property<string>("Vendor").HasColumnType("longtext");

                b.Property<ushort>("VendorId").HasColumnType("smallint unsigned");

                b.HasKey("Id");

                b.HasIndex("ModifiedWhen");

                b.HasIndex("VendorId").IsUnique();

                b.ToTable("UsbVendors");
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.Version", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<long>("Count").HasColumnType("bigint");

                b.Property<string>("Value").HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("Versions");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                b.Property<string>("Id").HasColumnType("varchar(255)");

                b.Property<string>("ConcurrencyStamp").IsConcurrencyToken().HasColumnType("longtext");

                b.Property<string>("Name").HasColumnType("varchar(256)").HasMaxLength(256);

                b.Property<string>("NormalizedName").HasColumnType("varchar(256)").HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedName").IsUnique().HasName("RoleNameIndex");

                b.ToTable("AspNetRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<string>("ClaimType").HasColumnType("longtext");

                b.Property<string>("ClaimValue").HasColumnType("longtext");

                b.Property<string>("RoleId").IsRequired().HasColumnType("varchar(255)");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
            {
                b.Property<string>("Id").HasColumnType("varchar(255)");

                b.Property<int>("AccessFailedCount").HasColumnType("int");

                b.Property<string>("ConcurrencyStamp").IsConcurrencyToken().HasColumnType("longtext");

                b.Property<string>("Email").HasColumnType("varchar(256)").HasMaxLength(256);

                b.Property<bool>("EmailConfirmed").HasColumnType("bit");

                b.Property<bool>("LockoutEnabled").HasColumnType("bit");

                b.Property<DateTimeOffset?>("LockoutEnd").HasColumnType("datetime(6)");

                b.Property<string>("NormalizedEmail").HasColumnType("varchar(256)").HasMaxLength(256);

                b.Property<string>("NormalizedUserName").HasColumnType("varchar(256)").HasMaxLength(256);

                b.Property<string>("PasswordHash").HasColumnType("longtext");

                b.Property<string>("PhoneNumber").HasColumnType("longtext");

                b.Property<bool>("PhoneNumberConfirmed").HasColumnType("bit");

                b.Property<string>("SecurityStamp").HasColumnType("longtext");

                b.Property<bool>("TwoFactorEnabled").HasColumnType("bit");

                b.Property<string>("UserName").HasColumnType("varchar(256)").HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail").HasName("EmailIndex");

                b.HasIndex("NormalizedUserName").IsUnique().HasName("UserNameIndex");

                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");

                b.Property<string>("ClaimType").HasColumnType("longtext");

                b.Property<string>("ClaimValue").HasColumnType("longtext");

                b.Property<string>("UserId").IsRequired().HasColumnType("varchar(255)");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider").HasColumnType("varchar(128)").HasMaxLength(128);

                b.Property<string>("ProviderKey").HasColumnType("varchar(128)").HasMaxLength(128);

                b.Property<string>("ProviderDisplayName").HasColumnType("longtext");

                b.Property<string>("UserId").IsRequired().HasColumnType("varchar(255)");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId").HasColumnType("varchar(255)");

                b.Property<string>("RoleId").HasColumnType("varchar(255)");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId").HasColumnType("varchar(255)");

                b.Property<string>("LoginProvider").HasColumnType("varchar(128)").HasMaxLength(128);

                b.Property<string>("Name").HasColumnType("varchar(128)").HasMaxLength(128);

                b.Property<string>("Value").HasColumnType("longtext");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.Ata", b =>
            {
                b.HasOne("DiscImageChef.CommonTypes.Metadata.TestedMedia", "ReadCapabilities").WithMany().
                  HasForeignKey("ReadCapabilitiesId").OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.BlockDescriptor", b =>
            {
                b.HasOne("DiscImageChef.CommonTypes.Metadata.ScsiMode", null).WithMany("BlockDescriptors").
                  HasForeignKey("ScsiModeId").OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.DensityCode", b =>
            {
                b.HasOne("DiscImageChef.CommonTypes.Metadata.SscSupportedMedia", null).WithMany("DensityCodes").
                  HasForeignKey("SscSupportedMediaId").OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.Mmc", b =>
            {
                b.HasOne("DiscImageChef.CommonTypes.Metadata.MmcFeatures", "Features").WithMany().
                  HasForeignKey("FeaturesId").OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.Scsi", b =>
            {
                b.HasOne("DiscImageChef.CommonTypes.Metadata.ScsiMode", "ModeSense").WithMany().
                  HasForeignKey("ModeSenseId").OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.Mmc", "MultiMediaDevice").WithMany().
                  HasForeignKey("MultiMediaDeviceId").OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.TestedMedia", "ReadCapabilities").WithMany().
                  HasForeignKey("ReadCapabilitiesId").OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.Ssc", "SequentialDevice").WithMany().
                  HasForeignKey("SequentialDeviceId").OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.ScsiPage", b =>
            {
                b.HasOne("DiscImageChef.CommonTypes.Metadata.Scsi", null).WithMany("EVPDPages").HasForeignKey("ScsiId").
                  OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.ScsiMode", null).WithMany("ModePages").
                  HasForeignKey("ScsiModeId").OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.SscSupportedMedia", b =>
            {
                b.HasOne("DiscImageChef.CommonTypes.Metadata.Ssc", null).WithMany("SupportedMediaTypes").
                  HasForeignKey("SscId").OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.TestedSequentialMedia", null).
                  WithMany("SupportedMediaTypes").HasForeignKey("TestedSequentialMediaId").
                  OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.SupportedDensity", b =>
            {
                b.HasOne("DiscImageChef.CommonTypes.Metadata.Ssc", null).WithMany("SupportedDensities").
                  HasForeignKey("SscId").OnDelete(DeleteBehavior.Cascade);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.TestedSequentialMedia", null).
                  WithMany("SupportedDensities").HasForeignKey("TestedSequentialMediaId").
                  OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.TestedMedia", b =>
            {
                b.HasOne("DiscImageChef.CommonTypes.Metadata.Ata", null).WithMany("RemovableMedias").
                  HasForeignKey("AtaId").OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.Chs", "CHS").WithMany().HasForeignKey("CHSId").
                  OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.Chs", "CurrentCHS").WithMany().
                  HasForeignKey("CurrentCHSId").OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.Mmc", null).WithMany("TestedMedia").HasForeignKey("MmcId").
                  OnDelete(DeleteBehavior.Cascade);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.Scsi", null).WithMany("RemovableMedias").
                  HasForeignKey("ScsiId").OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity("DiscImageChef.CommonTypes.Metadata.TestedSequentialMedia", b =>
            {
                b.HasOne("DiscImageChef.CommonTypes.Metadata.Ssc", null).WithMany("TestedMedia").HasForeignKey("SscId").
                  OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.Device", b =>
            {
                b.HasOne("DiscImageChef.CommonTypes.Metadata.Ata", "ATA").WithMany().HasForeignKey("ATAId").
                  OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.Ata", "ATAPI").WithMany().HasForeignKey("ATAPIId").
                  OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.Server.Models.CompactDiscOffset", "CdOffset").WithMany("Devices").
                  HasForeignKey("CdOffsetId").OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.FireWire", "FireWire").WithMany().
                  HasForeignKey("FireWireId").OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.MmcSd", "MultiMediaCard").WithMany().
                  HasForeignKey("MultiMediaCardId").OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.Pcmcia", "PCMCIA").WithMany().HasForeignKey("PCMCIAId").
                  OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.Scsi", "SCSI").WithMany().HasForeignKey("SCSIId").
                  OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.MmcSd", "SecureDigital").WithMany().
                  HasForeignKey("SecureDigitalId").OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.Usb", "USB").WithMany().HasForeignKey("USBId").
                  OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.DeviceStat", b =>
            {
                b.HasOne("DiscImageChef.Server.Models.Device", "Report").WithMany().HasForeignKey("ReportId").
                  OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.UploadedReport", b =>
            {
                b.HasOne("DiscImageChef.CommonTypes.Metadata.Ata", "ATA").WithMany().HasForeignKey("ATAId").
                  OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.Ata", "ATAPI").WithMany().HasForeignKey("ATAPIId").
                  OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.FireWire", "FireWire").WithMany().
                  HasForeignKey("FireWireId").OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.MmcSd", "MultiMediaCard").WithMany().
                  HasForeignKey("MultiMediaCardId").OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.Pcmcia", "PCMCIA").WithMany().HasForeignKey("PCMCIAId").
                  OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.Scsi", "SCSI").WithMany().HasForeignKey("SCSIId").
                  OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.MmcSd", "SecureDigital").WithMany().
                  HasForeignKey("SecureDigitalId").OnDelete(DeleteBehavior.SetNull);

                b.HasOne("DiscImageChef.CommonTypes.Metadata.Usb", "USB").WithMany().HasForeignKey("USBId").
                  OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity("DiscImageChef.Server.Models.UsbProduct", b =>
            {
                b.HasOne("DiscImageChef.Server.Models.UsbVendor", "Vendor").WithMany("Products").
                  HasForeignKey("VendorId").OnDelete(DeleteBehavior.Cascade).IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null).WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null).WithMany().HasForeignKey("UserId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null).WithMany().HasForeignKey("UserId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null).WithMany().HasForeignKey("RoleId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();

                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null).WithMany().HasForeignKey("UserId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null).WithMany().HasForeignKey("UserId").
                  OnDelete(DeleteBehavior.Cascade).IsRequired();
            });
            #pragma warning restore 612, 618
        }
    }
}